pipeline {
    agent any

    tools {
        maven 'Maven3'         // Define the Maven tool (configured in Jenkins global tools)
        jdk 'JDK17'            // Java version
        nodejs 'Node18'        // Node.js version
    }

    environment {
        DOCKER_HUB_CREDENTIALS = 'docker-hub-creds'  // Jenkins credentials ID for Docker Hub
        DOCKER_HUB_REPO = 'yourdockerhubusername'
        BACKEND_IMAGE = "${DOCKER_HUB_REPO}/backend-app"
        FRONTEND_IMAGE = "${DOCKER_HUB_REPO}/frontend-app"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    script {
                        // Node.js backend: install dependencies & run build (if needed)
                        sh 'npm install'
                        // Optional: Run tests
                        // sh 'npm test'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Docker Build & Push Backend') {
            steps {
                dir('backend') {
                    script {
                        docker.build("${BACKEND_IMAGE}:latest", '.')
                        docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                            docker.image("${BACKEND_IMAGE}:latest").push()
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push Frontend') {
            steps {
                dir('frontend') {
                    script {
                        docker.build("${FRONTEND_IMAGE}:latest", '.')
                        docker.withRegistry('', DOCKER_HUB_CREDENTIALS) {
                            docker.image("${FRONTEND_IMAGE}:latest").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                        kubectl apply -f k8s/backend-deployment.yaml
                        kubectl apply -f k8s/frontend-deployment.yaml
                    '''
                }
            }
        }
    }
}
